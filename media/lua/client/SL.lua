---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 01/02/23 19:11
--- function ISSkillProgressBar:renderPerkRect()
--- ISSkillProgressBar:updateTooltip(lvlSelected)

local characterMaxLevelCombats = { perk, maxLevel}
local characterMaxLevelPerks = { perk, maxLevel}
-- local getPlayer = getPlayer -- projectZombieLib 52 error

-- ---------------------------
local flag_onCustomUIKeyPressed = true
-- ---------------------------

---Add value to table characterMaxCombat
---@param perk PerkFactory.Perk
---@param level int
local function characterMaxLevelCombat(perk, maxLevel)
    table.insert(characterMaxLevelCombats,{
        perk = perk,
        maxLevel = maxLevel
    })
end

---Add value to table characterMaxPerks
---@param perk PerkFactory.Perk
---@param level int
local function characterMaxLevelPerk(perk, maxLevel)
    table.insert(characterMaxLevelPerks,{
        perk = perk,
        maxLevel = maxLevel
    })
end

local function onCustomUIKeyPressed(key)

    local character = getPlayer()

    --key34(character, key)
    --key35(character, key)
    key36(character, key)
end

function key36(character, key)
    if key == 36 then -- <<<< j
        print("Key = J\n")

        -- characterObjCreation funziona correttamente finchè non attivi characterObjAllSkills
        -- poi " unifica " i valori

        -- characterObjCreation funziona correttamente
        local characterObjCreation = getCharacterCreation(character)

        -- se attivi characterObjAllSkills allora characterObjAllSkills e characterObjAllSkills
        -- diventano una cosa unica.
        -- mi da l'idea che l'oggetto sia una valore global


        -- PROVA AD ATTIVARLO i valore di characterObjCreation cambieranno
        local characterObjAllSkills = getCharacterAllSkills(character)

        for i1, v1 in pairs(characterObjCreation.getPerkDetails()) do
            print("characterObjCreation " .. tostring(v1.perk))
        end

        print("----------------------------------------------------\n")

        --for i2, v2 in pairs(characterObjAllSkills.getPerkDetails()) do
        --    print("characterObjAllSkills " .. tostring(v2.perk))
        --end

        --for i1, v1 in pairs(characterObjAllSkills.getPerkDetails()) do
        --    for i2, v2 in pairs(characterObjCreation.getPerkDetails()) do
        --        if v1.perk == v2.perk then
        --            v1 = v2
        --            v1.flag = true
        --
        --            print(tostring(v1.flag))
        --        end
        --    end
        --end



        --for i, v in pairs(characterObjAllSkills.getPerkDetails()) do
        --    if "Combat" == v.perk:getParent():getName()  then -- < da creare un metodo
        --        calculateCombatMaxLevel(v.perk, v.level)
        --    else
        --        calculateCharacterMaxPerk(v.perk, v.level)
        --    end
        --end



        --  DBG_display_SLExample(false, true, true)

        --print(tostring(v.getPerkDetails().getLevel()))

        --print(tostring(i) .. " " .. tostring(characterCreation[i]))

    end
end

function key34(character, key)
    if key == 34 then -- <<<< g
        require("CharacterCreation.lua")

        local characterCreation = {}
        characterCreation = getCharacterCreation(character)
        for perk, level in pairs(characterCreation) do
            print(tostring(characterCreation[perk].perk) .. " " .. tostring(characterCreation[perk].level))
        end
        print("\n")
    end
end

function key35(character, key)
    if key == 35 then -- <<< h
        -- reset tables
        characterMaxLevelPerks = {}
        characterMaxLevelCombats = {}

        createCharacter(character)
        DBG_display_SLExample(false, true, true)
        print("\n")
    end

    if flag_onCustomUIKeyPressed then
        flag_onCustomUIKeyPressed = false
    end
end

---Check Level Max
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param _ --- unused
function checkLevelMax(character, perk, _)
    local CharacterObj = getCharacterCurrentSkill(character, perk)

    -- if per andare direttamente al secondo ciclo

    for perk_, level in pairs(characterMaxLevelPerks) do
        -- if true
        if (characterMaxLevelPerks[perk_].perk == CharacterObj.getPerkDetails().getPerk()) then
            if (CharacterObj.getPerkDetails().getLevel() >= level.maxLevel ) then
                blockLevel(character, perk, level.maxLevel, CharacterObj)
            end
        end
    end

    for perk_, level in pairs(characterMaxLevelCombats) do
        if (characterMaxLevelCombats[perk_].perk == CharacterObj.getPerkDetails().getPerk()) then
            if (CharacterObj.getPerkDetails().getLevel() >= level.maxLevel ) then
                blockLevel(character, perk, level.maxLevel, CharacterObj)
            end
        end
    end
end

---@param character IsoGameCharacter
---@param perk PerkFactory
---@param maxLevel int
---@param characterObj CharacterObj
function blockLevel(character, perk, maxLevel, characterObj)
    local convertLevelToXp_ = 0.0

    for level_ = 1, maxLevel do
        convertLevelToXp_ = convertLevelToXp_ + convertLevelToXp(perk, level_)
    end

    local totalXp = ( convertLevelToXp_ - characterObj.getPerkDetails().getXp()) * 2
    if totalXp == 0 then
        return
    end

    addXP_PZ(character, perk, totalXp )
end

--- Create Character Static
---@param character IsoGameCharacter
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function createCharacter(character)
    if not character then
        return nil
    end

    local CharacterObj = getCharacterAllSkills(character)

    for i, v in pairs(CharacterObj.getPerkDetails()) do
        if "Combat" == v.perk:getParent():getName()  then -- < da creare un metodo
            calculateCombatMaxLevel(v.perk, v.level)
        else
            calculateCharacterMaxPerk(v.perk, v.level)
        end
    end
end

--- Calculate Character Max Perk - table
---@param perk PerkFactory.Perk
---@param level int
function calculateCharacterMaxPerk(perk, level)
    if not perk or not level then
        return nil
    end

    characterMaxLevelPerk(perk, getCharacterMaxPerk(level))
end

--- Calculate Max Level Combat - table
---@param perk PerkFactory.Perk
---@param level int
function calculateCombatMaxLevel(perk, level)
    if not perk or not level then
        return nil
    end

    characterMaxLevelCombat(perk, getCombatMaxLevel(level) )
end

--- Prende il livello massimo che il personaggio può raggiungere.
--- Aggiungere un try catch
---@param levelCurrentPerk int
---@return int
function getCharacterMaxPerk(levelCurrentPerk)
    if not levelCurrentPerk then
        return nil
    end

    if levelCurrentPerk == ENUM.Zero then -- 0
        return ENUM.Four -- max levelPerk 4
    elseif levelCurrentPerk == ENUM.One then -- 1
        return ENUM.Six -- 6
    elseif levelCurrentPerk == ENUM.Two then -- 2
        return ENUM.Eight -- 8
    elseif levelCurrentPerk >= ENUM.Three then -- 3
        return ENUM.Ten -- 10
    end

    return nil
end

---Get Combat Max Level
---Aggiungere un try catch
---@param combatCurrentPerk int
---@return int Combat Max Level
function getCombatMaxLevel(combatCurrentPerk)
    if not combatCurrentPerk then
        return nil
    end

    if combatCurrentPerk == ENUM.Zero then -- 0
        return ENUM.Five -- 5
    elseif combatCurrentPerk == ENUM.One then -- 1
        return ENUM.Seven -- 7
    elseif combatCurrentPerk >= ENUM.Two then -- 2
        return ENUM.Ten -- 10
    end

    return nil
end

function DBG_display_SLExample(profession, perk, weapon)
    if perk then
        print("\n Perk")
        for perk, level in pairs(characterMaxLevelPerks) do
            print( tostring(characterMaxLevelPerks[perk].perk:getName()) .. " " .. tostring(level.maxLevel) )
        end
    end

    if weapon then
        print("\n weapon")
        for perk, level in pairs(characterMaxLevelCombats) do
            print( tostring(characterMaxLevelCombats[perk].perk:getName()) .. " " .. tostring(level.maxLevel) )
        end
    end

    --if profession then
    --    print("\n Profession")
    --    local characterObj =
    --    getCharacterCurrentSkill( getPlayer(), characterMaxLevelPerks[3].perkName )
    --    print(characterObj.getProfession())
    --end

end

--- event add Xp
local function AddXP(character, perk, level)
    checkLevelMax(character, perk, level)
end

local function OnGameStart()
    --init()
end

Events.OnCustomUIKeyPressed.Add(onCustomUIKeyPressed)
--Events.OnGameStart.Add(OnGameStart)
-- Events.AddXP.Add(AddXP)



-- Todo DBGMode_Init
function DBGMode_Init(key, debugMode)
    --if not debugMode then
    --    return
    --end
    --
    --local character = getPlayer()
    --
    --if ( key == 49 ) then
    --    -- reset tables
    --    characterMaxLevelPerks = {}
    --    characterMaxLevelCombats = {}
    --
    --    local characterObj = getCharacterAllSkills(character)
    --
    --
    --end
end


--[[
local function OnGameStart()
    -- Your code here
end

Events.OnGameStart.Add(OnGameStart)]]

--[[
IsoGameCharacter The character who's gaining XP.
PerkFactory.Perk The perk that is being leveled up.
Float The perk level gained.
Examples
local function AddXP(character, perk, level)
	-- Your code here
end

Events.AddXP.Add(AddXP)]]
