---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 28/10/23 18:34
---

local blockLevel = require("BlockLevel")
local characterPz = require("lib/CharacterPZ")
local characterMaxSkill = require("CharacterMaxSkill")
local codePerkDetails = require("CodePerkDetails")
local debugDiagnostics = require("lib/DebugDiagnostics")
local modDataManager = require("lib/ModDataManager")
local skillLimiter = require("SkillLimiter")

local CreateCharacterMaxSkillObj

---@type table
local characterAllPerks_ = {}

--- **Add All Perks to characterAllPerks_**
---@param perk PerkFactory.Perk
---@param currentLevel int
---@param maxLevel int
---@param xp string
---@return void
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory.Perk
local function addAllPerks(perk, currentLevel, maxLevel, xp)
    characterAllPerks_[perk] = {
        ---@type PerkFactory.Perk
        perk = perk,
        ---@type int
        currentLevel = currentLevel,
        ---@type int
        maxLevel = maxLevel,
        ---@type string
        xp = xp
    }
end

--- **Set Current Level**
---@param character IsoGameCharacter
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
local function setCurrentPerksLevel(character)
    ---@type int
    local five = 5
    ---@type int
    local seven = 7
    ---@type int
    local ten = 10
    ---@type float
    local xp = 10.0

    --- **Passive**
    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.FITNESS, ten)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.FITNESS, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.STRENGTH, ten)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.STRENGTH, xp, true, false, false)

    --- **Agility**
    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.SPRINTING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.SPRINTING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.LIGHTFOOT, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.LIGHTFOOT, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.NIMBLE, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.NIMBLE, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.SNEAK, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.SNEAK, xp, true, false, false)

    --- **Combat**
    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.AXE, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.AXE, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.LONGBLUNT, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.LONGBLUNT, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.SMALLBLUNT, seven)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.SMALLBLUNT, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.LONGBLADE, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.LONGBLADE, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.SMALLBLADE, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.SMALLBLADE, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.SPEAR, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.SPEAR, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.MAINTENANCE, seven)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.MAINTENANCE, xp, true, false, false)

    --- **Crafting**
    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.WOODWORK, ten)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.WOODWORK, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.COOKING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.COOKING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.FARMING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.FARMING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.DOCTOR, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.DOCTOR, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.ELECTRICITY, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.ELECTRICITY, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.METALWELDING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.METALWELDING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.MECHANICS, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.MECHANICS, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.TAILORING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.TAILORING, xp, true, false, false)

    --- **Firearm**
    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.AIMING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.AIMING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.RELOADING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.RELOADING, xp, true, false, false)

    -- **Survivalist**
    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.FISHING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.FISHING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.TRAPPING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.TRAPPING, xp, true, false, false)

    debugDiagnostics.setPerkLevel(character, debugDiagnostics.Perks.PLANTSCAVENGING, five)
    characterPz.addXP_PZ(character, debugDiagnostics.Perks.PLANTSCAVENGING, xp, true, false, false)
end

local function blockLevelX(character)
    --- **Passive**
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.FITNESS, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.STRENGTH, CreateCharacterMaxSkillObj)

    --- **Agility**
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.SPRINTING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.LIGHTFOOT, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.NIMBLE, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.SNEAK, CreateCharacterMaxSkillObj)

    --- **Combat**
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.AXE, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.LONGBLUNT, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.SMALLBLUNT, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.LONGBLADE, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.SMALLBLADE, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.SPEAR, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.MAINTENANCE, CreateCharacterMaxSkillObj)

    --- **Crafting**
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.WOODWORK, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.COOKING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.FARMING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.DOCTOR, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.ELECTRICITY, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.METALWELDING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.MECHANICS, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.TAILORING, CreateCharacterMaxSkillObj)

    --- **Firearm**
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.AIMING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.RELOADING, CreateCharacterMaxSkillObj)

    -- **Survivalist**
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.FISHING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.TRAPPING, CreateCharacterMaxSkillObj)
    blockLevel.checkLevelMax(character, debugDiagnostics.Perks.PLANTSCAVENGING, CreateCharacterMaxSkillObj)

end

local function tddSkill()
    local character = debugDiagnostics.characterUpdate()

    --- **Passive**

    ---@type PerkFactory.Perk
    local perk = debugDiagnostics.Perks.FITNESS

    debugDiagnostics.checkTest(10,
            characterAllPerks_[perk].currentLevel, "Fitness Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Fitness xp : ")

    perk = debugDiagnostics.Perks.STRENGTH

    debugDiagnostics.checkTest(10,
            characterAllPerks_[perk].currentLevel, "Strength Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Strength xp : ")

    --- **Agility**
    perk = debugDiagnostics.Perks.SPRINTING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Sprinting Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Sprinting xp : ")

    perk = debugDiagnostics.Perks.LIGHTFOOT

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Lightfoot Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Lightfoot xp : ")

    perk = debugDiagnostics.Perks.NIMBLE

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Nimble Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Nimble xp : ")

    perk = debugDiagnostics.Perks.SNEAK

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Sneak Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Sneak xp : ")

    --- **Combat**
    perk = debugDiagnostics.Perks.AXE

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Axe Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Axe xp : ")

    perk = debugDiagnostics.Perks.LONGBLUNT

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "LongBlunt Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "LongBlunt xp : ")

    perk = debugDiagnostics.Perks.SMALLBLUNT

    debugDiagnostics.checkTest(7,
            characterAllPerks_[perk].currentLevel, "SmallBlunt Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "SmallBlunt xp : ")

    perk = debugDiagnostics.Perks.LONGBLADE

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "LongBlade Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "LongBlade xp : ")

    perk = debugDiagnostics.Perks.SMALLBLADE

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "SmallBlade Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "SmallBlade xp : ")


    perk = debugDiagnostics.Perks.SPEAR

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Spear Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Spear xp : ")

    perk = debugDiagnostics.Perks.MAINTENANCE

    debugDiagnostics.checkTest(7,
            characterAllPerks_[perk].currentLevel, "Maintenance Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Maintenance xp : ")

    --- **Crafting**
    perk = debugDiagnostics.Perks.WOODWORK

    debugDiagnostics.checkTest(10,
            characterAllPerks_[perk].currentLevel, "Woodwork Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Woodwork xp : ")

    perk = debugDiagnostics.Perks.COOKING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Cooking Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Cooking xp : ")

    perk = debugDiagnostics.Perks.FARMING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Farming Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Farming xp : ")

    perk = debugDiagnostics.Perks.DOCTOR

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Doctor Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Doctor xp : ")

    perk = debugDiagnostics.Perks.ELECTRICITY

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Electricity Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Electricity xp : ")

    perk = debugDiagnostics.Perks.METALWELDING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "MetalWelding Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "MetalWelding xp : ")

    perk = debugDiagnostics.Perks.MECHANICS

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Mechanics Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Mechanics xp : ")

    perk = debugDiagnostics.Perks.TAILORING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Tailoring Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Tailoring xp : ")

    --- **Firearm**
    perk = debugDiagnostics.Perks.AIMING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Aiming Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Aiming xp : ")

    perk = debugDiagnostics.Perks.RELOADING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Reloading Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Reloading xp : ")

    -- **Survivalist**
    perk = debugDiagnostics.Perks.FISHING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Fishing Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Fishing xp : ")

    perk = debugDiagnostics.Perks.TRAPPING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "Trapping Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "Trapping xp : ")

    perk = debugDiagnostics.Perks.PLANTSCAVENGING

    debugDiagnostics.checkTest(5,
            characterAllPerks_[perk].currentLevel, "PlantScavenging Level : ")

    debugDiagnostics.checkTest( characterAllPerks_[perk].xp,
            characterPz.getXp(character, perk), "PlantScavenging xp : ")
end

local function tddModDataSkill()
    local characterMaxSkillModData = "characterMaxSkill"
    --- **Remove ModData**
    modDataManager.remove(characterMaxSkillModData)

    --- **Init Part 2**
    ---@type CharacterBaseObj
    local writeMaxSkillObj = skillLimiter.initCharacter()
    debugDiagnostics.checkTest(true, true, "WriteMaxSkillObj")

    --- **Init Part 1**
    ---@type CharacterBaseObj
    local readMaxSkillObj = skillLimiter.initCharacter()
    debugDiagnostics.checkTest(true, true, "ReadMaxSkillObj")

    ---@type table
    local table1 = writeMaxSkillObj:getPerkDetails()
    ---@type table
    local table2 = readMaxSkillObj:getPerkDetails()

    debugDiagnostics.checkTest(#table1,
            #table2, "MaxSkill table length" )

    --- **Check all Perks, currentLevel, maxLevel, xp**
    for i, v in ipairs(table1) do
        if v.perk == table2[i].perk and v.currentLevel == table2[i].currentLevel and
                v.maxLevel == table2[i].maxLevel and v.xp == table2[i].xp then
            debugDiagnostics.checkTest(true, true, "MaxSkill " .. tostring(v.perk) )
        end
    end

    --- **Remove ModData**
    modDataManager.remove(characterMaxSkillModData)
end

local function displaySkill()
    ---@type CharacterBaseObj
    local maxSkillObj =
        characterMaxSkill.getCreateMaxSkill( debugDiagnostics.characterUpdate() )

    for _, v in pairs(maxSkillObj:getPerkDetails()) do
        print("Perk - " .. tostring(v:getPerk()) ..
                " - CurrentLevel " .. tostring(v:getCurrentLevel()) ..
                " - MaxLevel " .. tostring(v:getMaxLevel()) ..
                " - Xp " .. tostring(v:getXp()) )
        debugDiagnostics.printLine()
    end
end

local function calculateMaxSkill()
    CreateCharacterMaxSkillObj =
        characterMaxSkill.getCreateMaxSkill( debugDiagnostics.characterUpdate() )

    for _, v in pairs(CreateCharacterMaxSkillObj:getPerkDetails()) do
        addAllPerks(v:getPerk(), v:getCurrentLevel(), v:getMaxLevel(), v:getXp())
    end
end

local function createCharacter()
    ---@type IsoGameCharacter
    local character = debugDiagnostics.characterUpdate()

    debugDiagnostics.setVerbose(false)
    debugDiagnostics.deleteCharacter()
    debugDiagnostics.createCharacter()
    calculateMaxSkill()
    setCurrentPerksLevel(character)
    blockLevelX(character)
    calculateMaxSkill(character)

    tddSkill()
    tddModDataSkill()

    debugDiagnostics.deleteCharacter()
    debugDiagnostics.createBasicCharacter()
    debugDiagnostics.displayTest()
end

local function key79(character, key)
    if key == 79 then -- <<<< numpad 1
        print("Key = numpad 1 > Skill SkillLimiter TDD  \n")
        createCharacter()
    end
end

local function key80(character, key)
    if key == 80 then -- <<<< numpad 2
        print("Key = numpad 2 > Display Skills \n")
        displaySkill()
    end
end

local function key73(character, key)
    if key == 73 then -- <<<< numpad 9
        print("Key = numpad 9 > kill Character \n")
        character:die()
    end
end

local function onCustomUIKeyPressed(key)
    ---@type IsoGameCharacter
    local character = getPlayer()

    key79(character, key) -- numpad 1 Skill SkillLimiter TDD
    key80(character, key) -- numpad 2 display skills
    key73(character, key) -- numpad 9 kill Character
end

Events.OnCustomUIKeyPressed.Add(onCustomUIKeyPressed)
