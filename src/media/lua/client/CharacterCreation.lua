---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 14/10/23 16:20
---

--[[
        errHandler.errMsg("ScheduledBookRead.writeBook(character)",
                errHandler.err.IS_NULL_CHARACTER)
        return nil
]]

---@class CharacterCreation

local CharacterCreation = {}

local characterLib = require("CharacterLib")
local characterPz = require("lib/CharacterPZ")
local debugDiagnostics = require("lib/DebugDiagnostics")
local errHandler = require("lib/ErrorHandler")
local perkFactoryPZ = require("lib/PerkFactoryPZ")
require("lib/CharacterBaseObj")

local mergeTraitsPerks_ = {}

---Merge Traits and Perks into a table.
---@param key
local function mergeTraitsPerks(key)
    local unusedValue = "unusedValue"
    if not mergeTraitsPerks_[key] then
        mergeTraitsPerks_[key] = unusedValue
    end
end

---Destory tables
local function destroyTables()
    mergeTraitsPerks_ = {}
end

---Crea le regole del personaggio
---@param character IsoGameCharacter
--- - Zero add perk to list " Combat "
--- - One add perk to list " No limits "
--- - Two add perk to list " Profession trait and Perk  "
--- - Three add perk to list " Generic  "
---@return CharacterBaseObj getPerkDetails() -- table PerkFactory.Perk perk, int level, float xp
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function CharacterCreation.getCharacterCreation(character)
    if not character then
        errHandler.errMsg("CharacterCreation.getCharacterCreation(character)",
                errHandler.err.IS_NULL_CHARACTER)
        return nil
    end

    -- @type CharacterBaseObj
    local CharacterProfessionObj = characterLib.getPerkProfession(character)

    -- @type CharacterBaseObj
    local CharacterTraitsPerkObj = characterLib.getTraitsPerk(character)

    -- @type CharacterBaseObj
    local CharacterAllPerksObj = characterLib.getAllPerks(character)

    -- @type CharacterBaseObj
    local CharacterMergeTraitsPerksProfessionObj = CharacterBaseObj:new()

    for _, v in pairs(CharacterProfessionObj:getPerkDetails()) do
        mergeTraitsPerks(v:getPerk())
    end

    for _, v in pairs(CharacterTraitsPerkObj:getPerkDetails()) do
        mergeTraitsPerks(v:getPerk())
    end

    -- mergeTraitsPerks_ > Trait and Perk of the profession
    for i, _ in pairs(mergeTraitsPerks_) do
        CharacterMergeTraitsPerksProfessionObj:addPerkDetails(i, nil, nil)
    end

    local skipIteration = false

    for _, v in pairs(CharacterAllPerksObj:getPerkDetails()) do

        --- add Fitness/Strength  perks to list " no limits "
        --- Skip if skipIteration is true all other conditions are false
        if not skipIteration then
            if v:getPerk() == debugDiagnostics.Perks.FITNESS or
                    v:getPerk() == debugDiagnostics.Perks.STRENGTH then

                v:setIdGroup(characterPz.EnumNumbers.ZERO) -- IdGroup add perk to list " no limits "
                skipIteration = true
            end
        end

        --- add perks to list " Profession trait and Perk  "
        --- Skip if skipIteration is true all other conditions are false
        if not skipIteration then
            -- CharacterMergeObj > IdGroup add perk ( Profession trait and Perk )
            -- to list Profession trait/Perk
            for _, v2 in pairs(CharacterMergeTraitsPerksProfessionObj:getPerkDetails()) do
                if v:getPerk() == v2:getPerk() then
                    -- IdGroup add perk to list " Profession trait and Perk  "
                    v:setIdGroup(characterPz.EnumNumbers.ONE)
                    skipIteration = true
                end
            end
        end

        local combat = "Combat"

        --- add perks to list " Combat "
        --- Skip if skipIteration is true all other conditions are false
        if not skipIteration then

            if v:getIdGroup() ~= characterPz.EnumNumbers.ONE then
                if combat == perkFactoryPZ.getParent_PZ( v:getPerk() )  then
                    -- IdGroup add perk to list " combat "
                    v:setIdGroup(characterPz.EnumNumbers.TWO)
                    skipIteration = true
                end
            end
        end

        -- IdGroup add perk to list " Generic "
        if not skipIteration then
            v:setIdGroup(characterPz.EnumNumbers.THREE)
            -- TODO: value assigned to variable skipIteration is overwritten on line 130 before use7
            skipIteration = true
        end

        skipIteration = false
    end

    destroyTables()

    return CharacterAllPerksObj
end

return CharacterCreation