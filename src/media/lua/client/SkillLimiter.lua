---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 01/02/23 19:11
--- function ISSkillProgressBar:renderPerkRect()
--- ISSkillProgressBar:updateTooltip(lvlSelected)
-- -----------------------------------------------------------------

--- Version 03-11-23 11:56

---@class SkillLimiter

require("lib/CharacterBaseObj")

local blockLevel = require("BlockLevel")
local characterMaxSkill = require("CharacterMaxSkill")
local codePerkDetails = require("CodePerkDetails")
local debugDiagnostics = require("lib/DebugDiagnostics")
local errHandler = require("lib/ErrHandler")
local modDataManager = require("lib/ModDataManager")

-- @type CharacterBaseObj
local CreateCharacterMaxSkillObj -- = CharacterBaseObj:new()

local SkillLimiter = {}

---@type string
local characterMaxSkillModData = "characterMaxSkill"

-- **Create Character Max Skill and create ModData**
---@return CharacterBaseObj
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function SkillLimiter.initCharacter()
    --- **Init Part 1**

    CreateCharacterMaxSkillObj = CharacterBaseObj:new()

    ---@type table
    local characterMaxSkillTable -- = {}

    if modDataManager.isExists(characterMaxSkillModData) then

        --- **Read ModData, get all stats of the character**
        characterMaxSkillTable =
            modDataManager.read(characterMaxSkillModData)

        --- **Decode ModData**
        CreateCharacterMaxSkillObj =
            codePerkDetails.decodePerkDetails(characterMaxSkillTable)
    else
        --- **Init Part 2**

        --- **Remove ModData**
        modDataManager.remove(characterMaxSkillModData)

        --- **Get skill obj**
        CreateCharacterMaxSkillObj =
            characterMaxSkill.getCreateMaxSkill( debugDiagnostics.characterUpdate() )

        --- **Encode ModData**
        characterMaxSkillTable =
            codePerkDetails.encodePerkDetails(CreateCharacterMaxSkillObj)

        --- **Save ModData**
        modDataManager.save(characterMaxSkillModData, characterMaxSkillTable)
    end

    return CreateCharacterMaxSkillObj
end

--- **Delete modData when character is death**
--- - Triggered when a character or zombie is killed
---@param character IsoGameCharacter
---@return void
local function OnCharacterDeath(character)
    --- **kill player**
    if getPlayer():isDead() then
        --- **Delete ModData**
        modDataManager.remove(characterMaxSkillModData)
    end
end

--- **Check Level Max**
--- - Triggered when a player gains XP.
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param level int
---@return void
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory.Perk
local function AddXP(character, perk, level)
    if not character then
        errHandler.errMsg("SkillLimiter.AddXP(character, perk, level)",
                errHandler.err.IS_NULL_CHARACTERS)
        return nil
    end

    if not perk then
        errHandler.errMsg("SkillLimiter.AddXP(character, perk, level)",
                errHandler.err.IS_NULL_PERK)
        return nil
    end

    if not CreateCharacterMaxSkillObj then
        errHandler.errMsg("SkillLimiter.AddXP(character, perk, level)",
                " CreateCharacterMaxSkillObj " .. errHandler.err.IS_NULL)
        return nil
    end

    blockLevel.checkLevelMax(character, perk, CreateCharacterMaxSkillObj)
end

--- **Init Character**
--- - Triggered after the start of a new game, and after a saved game has been loaded.
local function OnGameStart()
    CreateCharacterMaxSkillObj = SkillLimiter.initCharacter()
end

--- **Init Character**
--- - Triggered when a player is being created.
local function OnCreatePlayer(playerIndex, player)
    --- **Remove ModData**
    modDataManager.remove(characterMaxSkillModData)

    --- **Init Create Character Max Skill object from initCharacter()**
    CreateCharacterMaxSkillObj = SkillLimiter.initCharacter()
end

Events.OnCharacterDeath.Add(OnCharacterDeath)
Events.AddXP.Add(AddXP)
Events.OnGameStart.Add(OnGameStart)
Events.OnCreatePlayer.Add(OnCreatePlayer)

return SkillLimiter