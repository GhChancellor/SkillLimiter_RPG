---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 12/02/23 10:20
--- V002

---@class ProjectZomboidLibs

require("media.lua.shared.objects.CharacterTableX")

local characterTraitsTable_ = { perk, level }
local professionsTable_ = { perk, level }

---Add character Trait Table
---@param perk PerkFactory.Perk
---@param level int
local function characterTraitTable(perk, level)
    table.insert(characterTraitsTable_,{
        perk = perk,
        level = level
    })
end

---Add professions Table
---@param perk PerkFactory.Perk
---@param level int
local function professionsTable(perk, level)
    table.insert(professionsTable_,{
        perk = perk,
        level = level
    })
end

---Get Character Traits
---@return table perk, level
function getCharacterTraits(character)
    characterTraitsTable_ = { perk, level }

    local traits_PZ = getTraits_PZ(character)

    for i = 0, traits_PZ:size() - 1 do
        local traitMap = TraitFactory.getTrait(traits_PZ:get(i) ):getXPBoostMap()
        local traitKahluaTable = transformIntoKahluaTable(traitMap)

        for perk, level in pairs(traitKahluaTable) do
            characterTraitTable(perk, level)
        end
    end

    return characterTraitsTable_
end

---Get Character Profession
---@return table perk, level
function getCharacterProfession(character)
    professionsTable_ = { perk, level }

    local characterProfession_PZ = getCharacterProfession_PZ(character)
    local professionMap = ProfessionFactory.getProfession(characterProfession_PZ):getXPBoostMap()
    local professionKahluaTable = transformIntoKahluaTable(professionMap)

    for perk, level in pairs(professionKahluaTable) do
        professionsTable(perk, level)
    end

    return professionsTable_
end

---Get character and get current skill/trait
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return CharacterTableX -- ---@return table string profession, PerkFactory.Perk perk, int level, float xp, boolean flag
function getCharacterCurrentSkill(character, perk)
    -- Perks.Maintenance
    -- Perks.Woodwork
    -- Perks.Agility
    if not character then
        return nil
    end

    local profession = getCharacterProfession_PZ(character)
    local perk_ = getPerk_PZ(perk)
    local level = getPerkLevel_PZ(character, perk_)
    local xp = getXpPerk_PZ(character, perk_)

    return characterTableX_getCurrentCharacter(profession, perk_, level:intValue(), xp)
end

---Get character and get All skills/traits
---@param character IsoGameCharacter
---@return table string profession, PerkFactory.Perk perk, int level, float xp, boolean flag
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getCharacterAllSkills(character)
    if not character then
        return nil
    end

    characterTableX_DestroyTable()

    local profession = getCharacterProfession_PZ(character)

    for i = 0, Perks.getMaxIndex() - 1 do
        local perk = getPerk_PZ(Perks.fromIndex(i))
        local level = getPerkLevel_PZ(character, perk)
        local xp = getXpPerk_PZ(character, perk)
        -- table
        characterTableX_addPerkDetails(profession, perk, level, xp )
        profession = nil
    end

    return characterTableX_getPerkDetails()
end

--- Get Perk
---@param perk PerkFactory
---@return PerkFactory.Perk perk
--- - zombie.characters.skills.PerkFactory
function getPerk_PZ(perk)
    return PerkFactory.getPerk(perk)
end

--- Get Perk from name
---@param perk string
---@return PerkFactory.Perk perk
--- - zombie.characters.skills.PerkFactory
function getPerkFromName_PZ(perk)
    return PerkFactory.getPerkFromName(perk)
end

---Add XP
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param xp float
---@param flag1 boolean default false
---@param flag2 boolean default false
---@param flag3 boolean default true
function addXP_PZ(character, perk, xp, flag1, flag2, flag3)
    if not character or not perk then
        return nil
    end

    flag1 = flag1 or false -- is the default
    flag2 = flag2 or false -- is the default
    flag3 = flag3 or true -- is the default

    character:getXp():AddXP(perk, xp, flag1, flag2, flag3);
end

---@param value double
---@return int
function trunkFloatTo2Decimal(value)
    return tonumber(string.format("%.2f", value)) + 0.0
end

--- Get Perk Level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return int
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getPerkLevel_PZ(character, perk)
    if not character then
        return nil
    end

    return character:getPerkLevel(perk)
end

--- Get all Traits
---@param character IsoGameCharacter
---@return TraitCollection
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getTraits_PZ(character)
    if not character then
        return nil
    end

    return character:getTraits()
end

--- Get Character Traits
---@param character IsoGameCharacter
---@return IsoGameCharacter.CharacterTraits
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getCharacterTraits_PZ(character)
    if not character then
        return nil
    end

    return character:getCharacterTraits()
end

--- Get Charater profession
---@param character IsoGameCharacter
---@return String
--- - SurvivorDesc : zombie.characters.SurvivorDesc
function getCharacterProfession_PZ(character)
    if not character then
        return nil
    end

    return character:getDescriptor():getProfession()
end

--- Get XP perk
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return float xp
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function getXpPerk_PZ(character, perk)
    return trunkFloatTo2Decimal( character:getXp():getXP(perk) ) -- Perks.Maintenance
end

EnumNumbers = {
    ZERO = 0,
    ONE = 1,
    TWO = 2,
    THREE = 3,
    FOUR = 4,
    FIVE = 5,
    SIX = 6,
    SEVEN = 7,
    EIGHT = 8,
    NINE = 9,
    TEN = 10,
}

--- Convert Level To Xp
---@param level int
---@param perk PerkFactory.Perk
---@return float Xp
function convertLevelToXp(perk, level)
    -- Perks.Sprinting:getXp1()
    local result

    if not perk or not level then
        return nil
    end

    if level == EnumNumbers.ONE then
        result = getPerk_PZ(perk):getXp1()
    elseif level == EnumNumbers.TWO then
        result = getPerk_PZ(perk):getXp2()
    elseif level == EnumNumbers.THREE then
        result = getPerk_PZ(perk):getXp3()
    elseif level == EnumNumbers.FOUR then
        result = getPerk_PZ(perk):getXp4()
    elseif level == EnumNumbers.FIVE then
        result = getPerk_PZ(perk):getXp5()
    elseif level == EnumNumbers.SIX then
        result = getPerk_PZ(perk):getXp6()
    elseif level == EnumNumbers.SEVEN then
        result = getPerk_PZ(perk):getXp7()
    elseif level == EnumNumbers.EIGHT then
        result = getPerk_PZ(perk):getXp8()
    elseif level == EnumNumbers.NINE then
        result = getPerk_PZ(perk):getXp9()
    elseif level == EnumNumbers.TEN then
        result = getPerk_PZ(perk):getXp10()
    end

    return result
end

---Set Perk Level and level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param levelPerk int
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function setPerkLevel(character, perk, levelPerk, xp)
    if not character or not perk or not levelPerk then
        return nil
    end

    if xp == 0 then
        return
    end

    addXP_PZ(character, perk, xp,
            false, false, true )

end

--[[
    Utilizza removePerkLevel(character, Perks.Maintenance, _)
    funziona ma puÃ² dare valori negativi se si
    selezione il numero di livelli da togliere. Sistemare
]]
---Set Perk Level and level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param levelPerk int
--- ISPlayerStatsUI.lua 635
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function removePerkLevel(character, perk, levelPerk)
    if not character or not perk then
        return nil
    end

    local currentLevelPerk = getPerkLevel_PZ(character, perk)

    if levelPerk == true then
        if levelPerk > currentLevelPerk then
            levelPerk = currentLevelPerk
        end
    end

    levelPerk = levelPerk or currentLevelPerk

    for i = 0, levelPerk  do
        character:LoseLevel(perk)
    end

    local xpPerk = getXpPerk_PZ(character, perk)
    xpPerk = -xpPerk

    if xpPerk == 0 then
        return
    end

    addXP_PZ(character, perk, xpPerk,
            false, false, true )

end

---Get Parent_PZ
---@param perk PerkFactory.Perk
---@return PerkFactory.Perk
function getParent_PZ(perk)
    return perk:getParent():getName()
end

--- --------------------------------------------------------------------------------------------------------------

-- TODO resetChart
---Reset Character
---@param character IsoGameCharacter
function resetChart(character)
    --if not character then
    --    return nil
    --end
    --
    --local profession = getCharacterProfession_PZ(character)
    --local perk_ = getPerk_PZ(perk)
    --local level = getPerkLevel_PZ(character, perk_)
    --local xp = getXpPerk_PZ(character, perk_)
end

-- TODO setCharacterProfession_PZ
--- Get Charater profession
---@param character IsoGameCharacter
---@param profession String
--- - SurvivorDesc : zombie.characters.SurvivorDesc
function setCharacterProfession_PZ(character, profession)
    --if not character then
    --    return nil
    --end
    --
    --character:getDescriptor().setProfession(profession)
end

-- TODO setProfessionSkills_PZ
function setProfessionSkills_PZ()

end

-- TODO setXpLevelToZero
function setXpLevelToZero()

end

-- TODO LoseLevel
---Set Perk Level and level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return float xp
--- ISPlayerStatsUI.media.lua 635
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function setPerkLevel_PZ(character, perk, levelPerk)
    --local character = getPlayer()
    --local perk = PerkFactory.getPerk(Perks.Cooking)
    --character:level0(perk)
    --character:LoseLevel(perk)
    --character:LevelPerk(perk)  -- Perks.Maintenance
end